//
//  Imandra Inc.
//  Copyright (c) 2024
//
//  Minimal FIX 4.2 model with explicit import from 4.4
//   
// 
//  For further info see https://docs.imandra.ai
// 
//

import FIX_4_2
import FIX_4_4

// Import an explicitly reference message from another Library
message FIX_4_4.NewOrderSingle {
    req ClOrdID
    // Side can reference the union of values from 4.2 and 4.4
    // such as Redeem
    req Side valid when it != Side.Redeem
    req TransactTime
    req OrdType valid when it in [ OrdType.Limit, OrdType.Market ]
    req HandlInst
   

	validate { state.live_order == false  }
}
// 
// Import an outbound message we would send out
// 
// 
outbound message ExecutionReport {
    req OrderID
    req ExecID
    req ExecType
    req OrdStatus
    // note how Side includes enum values from the 4.4 dictionary
    // as we have an explicit import 
    req Side valid when it != Side.Redeem
    req LeavesQty
    req CumQty
    req AvgPx
    req ExecTransType
    req Symbol
}

// Define our internal state
internal state {
    // The following fields would be assigned to 
    assignable {
        OrdStatus   : OrdStatus = OrdStatus.New;
        Side        : Side = Side.Buy;
        LeavesQty   : Qty = 0.0;
        CumQty      : Qty = 0.0;
        AvgPx       : Price = 0.0;
        
    }
    
    live_order : bool = false;
    
    // These are not required within the orders, etc...
    OrdQty : Qty = 0.0;
    current_time : UTCTimeOnly = UTCTimeOnly (8, 0, 0, None);
    
    // Define the opening and closing times
    opening_time : UTCTimeOnly = UTCTimeOnly (8, 0, 0, None);
    closing_time : UTCTimeOnly = UTCTimeOnly (16, 0, 0, None);
}

   
receive (msg:FIX_4_4.NewOrderSingle){

    // Extract all relevant fields from within the message
    assignFrom (msg, state)
    
    state.live_order = true
    
    send ExecutionReport {
        state with 
            ExecID = "";
            OrderID = msg.ClOrdID;
            ExecType = ExecType.New;
            ExecTransType = ExecTransType.New;
            Symbol = "";
            // override Side with a new value
            // this can come from the union of Side values
            // from 4.2 or 4.4
            Side  = Side.Redeem;
    }
    
} 

