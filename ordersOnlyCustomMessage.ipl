//
//  Imandra Inc.
//  Copyright (c) 2024
//
//  Minimal FIX 4.4 model
//   
//
//  For further info see https://docs.imandra.ai
// 
//

import FIX_4_4

//
// Import inbound NewOrderSingle message
//
message NewOrderSingle {
    req ClOrdID
    req Side
    req TransactTime
    req OrdType valid when it in [ OrdType.Limit, OrdType.Market ]
    req OrderQtyData.OrderQty
    req myNewOrderSingleField

	validate { state.live_order == false  }
}

// can extend the message
extend message NewOrderSingle {
    myNewOrderSingleField "20001" : string
}

// 
// Import an outbound message we would send out
// 
// 
outbound message ExecutionReport {
    req OrderID
    req ExecID
    req ExecType
    req OrdStatus
    req Side
    req LeavesQty
    req CumQty
    req AvgPx
    req myNewExecutionReportField
}

// can extend ExecutionReport
extend message ExecutionReport {
    myNewExecutionReportField "20002" : OrdStatus
}

// can extend Enum also
extend enum OrdStatus {
    newCase "n"
}

// Define our internal state
internal state {
    // The following fields would be assigned to 
    assignable {
        OrdStatus   : OrdStatus = OrdStatus.New;
        Side        : Side = Side.Buy;
        OrderID     : string = "";
        LeavesQty   : Qty = 0.0;
        CumQty      : Qty = 0.0;
        AvgPx       : Price = 0.0;
        
    }
    
    live_order : bool = false;
    
    // These are not required within the orders, etc...
    OrdQty : Qty = 0.0;
    current_time : UTCTimeOnly = UTCTimeOnly (8, 0, 0, None);
    
    // Define the opening and closing times
    opening_time : UTCTimeOnly = UTCTimeOnly (8, 0, 0, None);
    closing_time : UTCTimeOnly = UTCTimeOnly (16, 0, 0, None);
}

//  Define how the model should process a validated
//  incoming NewOrderSingle message
receive ( msg : NewOrderSingle ) {
	
    // Extract all relevant fields from within the message
    assignFrom (msg, state)
    
    state.live_order = true
    
    send ExecutionReport {
        state with 
            ExecID = "";
            myNewExecutionReportField = AcceptedForBidding;
            ExecType = ExecType.New;
    }
    
}

// Handle rejections for 'NewOrderSingle'
reject ( msg : NewOrderSingle, rejectReason : string ) {
    // A field is missing 
    missingfield : {
         send ExecutionReport {
            state with
                ExecID = "";
                myNewExecutionReportField = OrdStatus.Expired;
                ExecType = ExecType.Rejected;
        }
    }
    
    // A field value is 
    invalidfield : {
        send ExecutionReport {
            state with
                ExecID = "";
                myNewExecutionReportField = OrdStatus.PendingCancel;
                ExecType = ExecType.Rejected;
        }    
    }
    
    // One or more 'validate' statements is 
    invalid : {
        send ExecutionReport {
            state with
                ExecID = "";
                myNewExecutionReportField = newCase;
                ExecType = ExecType.Rejected;
        }
   }
}

// Define action 'time_change'
action time_change {
    new_time : UTCTimeOnly
    
    validate { this.new_time >= state.current_time && state.OrdStatus == OrdStatus.New }
}

// Define logic for handling 'time_change' action above
receive ( act : time_change ) {
    // Save the new time into internal state
    state.current_time = act.new_time
    // If it's past closing time, then cancel the order and send
    // out the ExecutionReport
    if ( act.new_time >= state.closing_time) then {
        state.OrdStatus = OrdStatus.Expired
        state.live_order = false
        
        send ExecutionReport {
            state with 
                ExecID = "";
                myNewExecutionReportField = newCase;
                ExecType = ExecType.New;
        }
    }
    
}