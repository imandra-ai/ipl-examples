//
//  Aesthetic Integration Limited
//  Copyright (c) 2014 - 2017
//
//  FIX 4.4 model with example repeating groups import
//
//  For further info see https://docs.imandra.ai
//


import FIX_4_4

internal state {
    assignable {
        Side : Side = Side.Buy;
        AccountType :? AccountType
        Account : string = "";
        OrderID: string = "";
        ExecID: string = "";
        ExecType:ExecType = ExecType.Trade;
        LeavesQty:Qty = 0.0;
        CumQty:Qty = 0.0;
        AvgPx:Price = 0.0;
        OrdStatus:OrdStatus = OrdStatus.Replaced;
        // UndInstrmtGrp is a Repeating Group
        UndInstrmtGrp: UndInstrmtGrp

        // CFICode is a field within a component block.
        // It is imported in messages both optionally and as a required field
        // thus it has the ':*' annotation
        Instrument.CFICode :* string = "1";
   }

}

outbound message ExecutionReport {
    req Account
    opt AccountType
    req OrderID
    req ExecID
    req ExecType
    req OrdStatus
    req Side
    req LeavesQty
    req CumQty
    req AvgPx
    // for repeating groups the whole group is imported and the optionality of field elements
    // is the same for each copy
    req UndInstrmtGrp
    // for elements of component blocks, each one must be explicitly imported
    opt Instrument.CFICode valid when it == (Some "")


}

repeatingGroup UndSecAltIDGrp {
    req NoUnderlyingSecurityAltID
    req UnderlyingSecurityAltIDSource
}

repeatingGroup UndInstrmtGrp {
    opt NoUnderlyings
    req UnderlyingInstrument.UnderlyingContractMultiplier
    opt UnderlyingInstrument.EncodedUnderlyingIssuer
    req UnderlyingInstrument.UndSecAltIDGrp
}

// a test to allow record in action
repeatingGroup UnderlyingStipulations {
  req NoUnderlyingStips
  req UnderlyingStipType
}

action fill {
    // a declaration of an action field which is a repeating group type
    //undInstrmntGrp : UndInstrmtGrp
    testRec: UnderlyingInstrument
    cumQty : float
}


message NewOrderSingle {
    opt Account default =  "d"
    opt AccountType
    req ClOrdID
    req Side
    
    req TransactTime
    req OrdType valid when it in [OrdType.Limit, OrdType.Market] valid when it != MarketWithLeftOverAsLimit
    req UndInstrmtGrp
        valid when present(it.NoUnderlyings)
        valid when it.UnderlyingInstrument.EncodedUnderlyingIssuer == (Some "a")
        valid when it.UnderlyingInstrument.UndSecAltIDGrp.UnderlyingSecurityAltIDSource == SecurityIDSource.Belgian
    // for elements of component blocks, each one must be explicitly imported
    req Instrument.CFICode

    // this is a validate statement which implicitly checks each copy of every repeating group
    validate{this.UndInstrmtGrp.UnderlyingInstrument.EncodedUnderlyingIssuer == 
    (if this.UndInstrmtGrp.UnderlyingInstrument.UndSecAltIDGrp.UnderlyingSecurityAltIDSource == (SecurityIDSource.Belgian) then (Some "Belgian") else (Some "NotBelgian")) &&
    this.UndInstrmtGrp.UnderlyingInstrument.EncodedUnderlyingIssuer in ["a","b","c"]}

  
}

receive (msg:NewOrderSingle){
    // the state assignable variables are set here
    // including all element of the repeating group recursively

    // can write a repeating groups comparison statement
    // which checks each element of the repeating group
    // this is only allowed for boolean type expressions

    if msg.UndInstrmtGrp.UnderlyingInstrument.EncodedUnderlyingIssuer in ["a","b","c"] then return

    assignFrom(msg,state)
    send ExecutionReport state
}

receive (f:fill){
    //state.UndInstrmtGrp = f.undInstrmntGrp

    if f.cumQty > state.CumQty then
    // here the "with" assignment overrides any within state
    send ExecutionReport {state with CumQty = f.cumQty;}
    else send ExecutionReport state

}
